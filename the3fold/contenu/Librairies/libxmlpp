<h1>La bibliothèque libxml++</h1>

<p>libxml++ est une librairie permettant de lire et ecrire facilement des document XML en C++.</p> 

<p>Avant de commencer, quelques rappels sur les commandes qui pourront être utiles :</p> 
<ul>
<li>Pour désarchiver les sources : <span class="commande">tar -xvzf Archive.tar.gz</span></li>
<li>Pour compiler lorsqu'il y a un Makefile : <span class="commande">make</span></li>
<li>Pour nettoyer les sources (supprimer les fichiers objets) : <span class="commande">make clean</span></li>
</ul>

<h2>1 - Du <acronym title="Extensible Markup Language">XML</acronym>, de <acronym title="Simple API for XML">SAX</acronym> et de <acronym title="Document Object Model">DOM</acronym></h2>

<p>Et oui, autour de XML tournent tout un tas de buzzwords, que nous allons nous empresser de découvrir. Tout d'abord, si vous ne savez pas ce qu'est XML, je vous conseille vivement de faire un détour du coté des <a href="http://www.w3schools.com/xml/default.asp">tutoriels de W3Schools</a> qui en plus d'être abordables, sont assez complets. Pour ce qui est de SAX et DOM, ce sont deux interfaces qui définissent des moyens différents d'accéder aux données contenues dans un fichier XML. SAX permet de lire le fichier de manière séquentielle, traitant les balises une par une. L'avantage de cette méthode est de demander nettement moins de mémoire lorsque les documents deviennent un petit peu important. DOM permet de lire l'intégralité du fichier XML, et de le stocker en mémoire sous forme d'un arbre auquel on accède ensuite par le biais d'objet. Cette méthode est à mon avis beaucoup plus simple d'utilisation, car elle permet entre autres de traiter les données dans un ordre différent de celui dans lequel elles sont stockées.</p>

<p>libxml++ se base sur la libxml, qui elle même offre des interfaces SAX et DOM. Si vous désirez plus de détails sur les spécifications de ces deux interfaces, vous en trouverez sur <a href="http://www.saxproject.org">la page du projet SAX</a> pour SAX, et <a href="http://www.w3.org/DOM">la page du W3C</a> pour DOM.</p>

<h2>2 - De la lecture avec DOM</h2>

<p>Parser un document XML peut se faire très simplement à l'aide de l'objet <span class="inline">xmlpp::DomParser</span>. Voyons tout d'abord la portion de code suivant :</p>

<p class="code">
    xmlpp::DomParser parser;<br/>
    parser.set_validate();<br/>
    parser.set_substitute_entities();<br/> 
    parser.parse_file(filepath);<br/>
    if(parser)<br/>
    {<br/>
        &nbsp;&nbsp;&nbsp;xmlpp::Document* doc = parser.get_document();<br/>
        &nbsp;&nbsp;&nbsp;xmlpp::Element* root = doc.get_root_node();<br/>
        &nbsp;&nbsp;&nbsp;<span class="comment">// Parcours l'arbre</span><br/>
    }<br/>
</p>

<p>D'abord on utilise la fonction <span class="inline">set_validate</span> qui, pour autant que je sache, ne fait pas valider le document par le parser, mais fait vérifier que le document soit bien formé. D'après les reccomendations du W3C, un programme ne devrait pas ouvrir et traiter un document XML qui ne soit pas bien formé. Notez que <span class="inline">set_validate</span> prend un booléen en argument qui vaut <span class="inline">true</span> par défaut.</p>
<p>On appelle ensuite <span class="inline">set_substitute_entities</span> qui permet de remplacer automatiquement les entitées par leurs vraies valeurs. Il est en effet possible de définir, dans un document, des entités qui sont des sortes d'alias pour certaines données (les entités commencent par &amp; et finissent par ;). La fonction <span class="inline">set_substitute_entities</span> prend elle aussi un booléen valant true par défaut en argument.</p>
<p>Il ne reste alors plus qu'à appeler la fonction <span class="inline">parse_file</span> qui prend comme paramètre l'adresse du fichier à parser pour que la totalité du document soit parsée et mise en mémoire. On utilise alors la fonction <span class="inline">get_document</span> pour accéder au document en lui même, puis la fonction <span class="inline">get_root_node</span> pour accéder au noeud racine du document. On peut alors parcourir l'arbre à partir de ce noeud.</p>

<!--<h2>3 - De la lecture avec SAX</h2>-->

<h1>A suivre ...</h1>

<br/>
